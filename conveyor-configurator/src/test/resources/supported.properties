#List of supported conveyor properties

#Names for time units must be compatible with Java's TimeUnits enum
#Time unit allows fraction
#This is an example of default parameter
conveyor.idleHeartBeat = 1.5 SECONDS
conveyor.conveyor_name.defaultBuilderTimeout = 1 SECONDS
#If time unit omitted, MILLISECONDS assumed
conveyor.conveyor_name.rejectUnexpireableCartsOlderThan = 10000

#Optional. Default is AssemblingConveyor
#If defined, this parameter overrides 'maxQueueSize'
conveyor.conveyor_name.supplier = new com.aegisql.conveyor.AssemblingConveyor();
#If maxQueueSize is defined, AssemblingConveyor instance with ArrayBlockingQueue will be created
#If defined, this parameter overrides any custom 'supplier'
#If your custom conveyor needs queue size initialization, do it with the 'supplier'
conveyor.conveyor_name.maxQueueSize: 10000
#When epriority queue enabled, Assembling conveyor will be created with the PriorityBlockingQueue
#If defined and enabled, overrides  maxQueueSize
conveyor.conveyor_name.enablePriorityQueue: true


#Desirable parameter.
#Conveyor must have a builder supplier by the time it is used.  
conveyor.conveyor_name.builderSupplier = new com.aegisql.conveyor.config.harness.StringSupplier("conveyor_name");


#Applies ForwardResult result consumer.
#Can be defined several times, each time adding new forwarding consumer
#Third parameter is optional, of not defined, assumed no key conversion is necessary
conveyor.conveyor_name.forward = \
	var label = "Y";\
	var name = "other_conveyor_name";\
	var keyTransformer = function(k){return 'X'+k}; /*optional field*/
#Comma separated list of labels. 
#String must be single or double quoted
#If not quoted, considered as a public constant reference 
conveyor.conveyor_name.acceptLabels = "X_PART","Y_PART"
conveyor.conveyor_name.acceptLabels = org.my.project.Labels.FORWARD

#Static Part property can be defined as many times as needed.
#Each one will be sent to the conveyor
conveyor.conveyor_name.staticPart = \
	label = com.aegisql.conveyor.config.harness.NameLabel.FIRST;\
	value = "preffix-";
conveyor.conveyor_name.staticPart = \
	label = com.aegisql.conveyor.config.harness.NameLabel.LAST;\
	value = "-suffix";

#First Result Consumer MUST be first in chain of Result Consumers
conveyor.conveyor_name.firstResultConsumer = new com.aegisql.conveyor.consumers.result.LogResult()
#Next Result Consumers can be defined several times
conveyor.conveyor_name.nextResultConsumer = com.aegisql.conveyor.config.ConfigUtilsTest.rCounter
#First Scrap Consumer MUST be first in chain of Scrap Consumers
conveyor.conveyor_name.firstScrapConsumer = new com.aegisql.conveyor.consumers.scrap.LogScrap()
#Next Scrap Consumers can be defined several times
conveyor.conveyor_name.nextScrapConsumer = com.aegisql.conveyor.config.ConfigUtilsTest.sCounter
#Lambda
conveyor.conveyor_name.onTimeoutAction = com.aegisql.conveyor.config.ConfigUtilsTest.timeoutAction
#Lambda
conveyor.conveyor_name.defaultCartConsumer = com.aegisql.conveyor.config.ConfigUtilsTest.lvc
#Readiness evaluator is either a Predicate or a BiPredicate, with additional Status parameter
#Both types supported
#But only one will be finally applied
conveyor.conveyor_name.readinessEvaluator = com.aegisql.conveyor.config.ConfigUtilsTest.biPredRE; //BiPredicate
conveyor.conveyor_name.readinessEvaluator = com.aegisql.conveyor.config.ConfigUtilsTest.predRE; //Predicate
#Chainable lambda
conveyor.conveyor_name.addCartBeforePlacementValidator = com.aegisql.conveyor.config.ConfigUtilsTest.cartValidator1
conveyor.conveyor_name.addCartBeforePlacementValidator = com.aegisql.conveyor.config.ConfigUtilsTest.cartValidator2
#Chainable lambda
conveyor.conveyor_name.addBeforeKeyEvictionAction = com.aegisql.conveyor.config.ConfigUtilsTest.beforeEviction
#Chainable lambda
conveyor.conveyor_name.addBeforeKeyReschedulingAction = com.aegisql.conveyor.config.ConfigUtilsTest.beforeReschedule
#Boolean
conveyor.conveyor_name.enablePostponeExpiration = false
#Boolean
conveyor.enablePostponeExpirationOnTimeout = false
#Time Unit
conveyor.conveyor_name.expirationPostponeTime = 1000
#Boolean
conveyor.conveyor_name.autoAcknowledge = true
#Lambda
conveyor.conveyor_name.acknowledgeAction = com.aegisql.conveyor.config.ConfigUtilsTest.acknowledgeAction
#Comma separated list of Status enum values.
conveyor.conveyor_name.autoAcknowledgeOnStatus = READY,TIMED_OUT,CANCELED
#Function
conveyor.conveyor_name.cartPayloadAccessor = com.aegisql.conveyor.config.ConfigUtilsTest.payloadFunction

#Adding Parallelism
#There are two mutually exclusive ways to set parallelism

#If parallel parameter contains a comma separated list of conveyors, 
#then it is treated as a L-Balanced conveyor
conveyor.conveyor_name.parallel = conveyor_name_1, conveyor_name_2
#If parallel parameter contains a number > 1, then it is treated as 
#a K-Balanced conveyor
#Value <=1 cancels parallelism
conveyor.conveyor_name.parallel = 2

#Adding persistence
#In 1.3.10 Persistence must be already available by its name.
#In future releases initialization of Persistence will be supported by configurator.
conveyor.conveyor_name.persistence = com.aegisql.conveyor.persistence.derby.testConv:type=conveyor_name


#Dependency parameter affects order of conveyor initialization
#In this case, 'conveyor_name' will be created after 'conveyor_name_1'
#Can contain a comma separated list; L-Balanced parallelism effectively creates a dependency
conveyor.conveyor_name.dependency = conveyor_name_1
#circle dependency example
#Configurator will be blocked until ConveyorConfigurator.DEFAULT_TIMEOUT_MSEC will happen
#Be advised that default timeout is INFINITY. 
conveyor.a.dependency = b
conveyor.b.dependency = a

#Conveyor with "dot" delimited name
conveyor.conveyor.name.defaultBuilderTimeout = 1 SECONDS

#User defined ResultConsumer for the CONFIGURATOR conveyor
#To get access to the conveyor right after it were created and initialized with provided parameters
#Allows to customize conveyors in a way which is not covered by configurator itself.
conveyor.conveyor_name.postInit = com.aegisql.conveyor.config.ConfigUtilsTest.conveyor_namePostCreation; //custom post-creation processor
#Next param can be applied only as default.
#conveyor.postFailure = <some ref or function>

#Configurator provides limited support for JavaScript Functions
#In place of Conveyor Functionsl interfaces
conveyor.postFailure = function(bin){print('FAILED '+bin.key);}
conveyor.conveyor.name.postInit = function(bin){print('CREATED CONVEYOR '+bin.product.getName());}

#Readiness Tester
#Optional number of times the label must be accepted before ready will fire.
#Default is one
#Can be combined with Readiness Evaluators. 
conveyor.conveyor_name.readyWhenAccepted = 2 com.aegisql.conveyor.config.harness.NameLabel.FIRST,com.aegisql.conveyor.config.harness.NameLabel.LAST
conveyor.conveyor_name.readyWhenAccepted = com.aegisql.conveyor.config.harness.NameLabel.END

