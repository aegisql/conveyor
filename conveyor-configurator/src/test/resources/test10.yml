conveyor.idleHeartBeat: 1.5 SECONDS
conveyor.c10_1.defaultBuilderTimeout: 1 SECONDS
conveyor.c10_1.rejectUnexpireableCartsOlderThan: 10000
conveyor.c10_1.firstResultConsumer: new com.aegisql.conveyor.consumers.result.LogResult()
conveyor.c10_1.firstScrapConsumer: new com.aegisql.conveyor.consumers.scrap.LogScrap()
conveyor.c10_1.onTimeoutAction: com.aegisql.conveyor.config.ConfigUtilsTest.timeoutAction
conveyor.c10_1.builderSupplier: com.aegisql.conveyor.config.harness.StringSupplier("test_persistence"); //JavaScript
conveyor.c10_1.readyWhenAccepted: com.aegisql.conveyor.config.harness.NameLabel.FIRST,com.aegisql.conveyor.config.harness.NameLabel.LAST
conveyor.c10_1.readyWhenAccepted: com.aegisql.conveyor.config.harness.NameLabel.END
#
conveyor.c10_1.forward:  >
  var label = "Y";
  var name = "other_c10_1";
  var keyTransformer = function(k){return 'X'+k};
conveyor.c10_1.acceptLabels:  '"X_PART","Y_PART"'
conveyor.c10_1.acceptLabels:  org.my.project.Labels.FORWARD

#Static Part property can be defined as many times as needed.
#Each one will be sent to the conveyor
conveyor.c10_1.staticPart: >
  label = com.aegisql.conveyor.config.harness.NameLabel.FIRST;
  value = "preffix-";
conveyor.c10_1.staticPart: >
  label = com.aegisql.conveyor.config.harness.NameLabel.LAST;
  value = "-suffix";
#First Result Consumer MUST be first in chain of Result Consumers
conveyor.c10_1.firstResultConsumer:  new com.aegisql.conveyor.consumers.result.LogResult()
#Next Result Consumers can be defined several times
conveyor.c10_1.nextResultConsumer:  com.aegisql.conveyor.config.ConfigUtilsTest.rCounter
#First Scrap Consumer MUST be first in chain of Scrap Consumers
conveyor.c10_1.firstScrapConsumer:  new com.aegisql.conveyor.consumers.scrap.LogScrap()
#Next Scrap Consumers can be defined several times
conveyor.c10_1.nextScrapConsumer:  com.aegisql.conveyor.config.ConfigUtilsTest.sCounter
#Lambda
conveyor.c10_1.onTimeoutAction:  com.aegisql.conveyor.config.ConfigUtilsTest.timeoutAction
#Lambda
conveyor.c10_1.defaultCartConsumer:  com.aegisql.conveyor.config.ConfigUtilsTest.lvc
#Readiness evaluator is either a Predicate or a BiPredicate, with additional Status parameter
#Both types supported
#But only one will be finally applied
conveyor.c10_1.readinessEvaluator:  com.aegisql.conveyor.config.ConfigUtilsTest.biPredRE; //BiPredicate
conveyor.c10_1.readinessEvaluator:  com.aegisql.conveyor.config.ConfigUtilsTest.predRE; //Predicate
#Chainable lambda
conveyor.c10_1.addCartBeforePlacementValidator:  com.aegisql.conveyor.config.ConfigUtilsTest.cartValidator1
conveyor.c10_1.addCartBeforePlacementValidator:  com.aegisql.conveyor.config.ConfigUtilsTest.cartValidator2
#Chainable lambda
conveyor.c10_1.addBeforeKeyEvictionAction:  com.aegisql.conveyor.config.ConfigUtilsTest.beforeEviction
#Chainable lambda
conveyor.c10_1.addBeforeKeyReschedulingAction:  com.aegisql.conveyor.config.ConfigUtilsTest.beforeReschedule
#Boolean
conveyor.c10_1.enablePostponeExpiration:  false
#Boolean
conveyor.enablePostponeExpirationOnTimeout:  false
#Time Unit
conveyor.c10_1.expirationPostponeTime:  1000
#Boolean
conveyor.c10_1.autoAcknowledge:  true
#Lambda
conveyor.c10_1.acknowledgeAction:  com.aegisql.conveyor.config.ConfigUtilsTest.acknowledgeAction
#Comma separated list of Status enum values.
conveyor.c10_1.autoAcknowledgeOnStatus:  READY,TIMED_OUT,CANCELED
#Function
conveyor.c10_1.cartPayloadAccessor:  com.aegisql.conveyor.config.ConfigUtilsTest.payloadFunction


