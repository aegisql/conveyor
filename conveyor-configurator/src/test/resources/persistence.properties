#List of supported persistence properties

#Only DERBY persistence type is supported now
#Conveyor, however, can refer any persistence by its name
#Like: conveyor.conv_name.persistence = some.persistence.name

#The only mandatory property for DERBY persistence is type of the Conveyor key
#All other parameters are optional 
persistence.derby-client.testclient.parts2.keyClass = java.lang.Integer
persistence.derby.test.parts.keyClass = java.lang.Integer
persistence.sqlite.testsqlite.parts.keyClass = java.lang.Integer
persistence.mysql.testmysql.parts.keyClass = java.lang.Integer
persistence.postgres.testpostgres.parts.keyClass = java.lang.Integer

#Name of table or collection for complete log
persistence.derby.test.parts.completedLogTable=parts_complete

#Converts labels into storeable format 
persistence.derby.test.parts.labelConverter = com.aegisql.conveyor.config.harness.NameLabel

#Auto init database, default is true
persistence.derby.test.autoInit = true
persistence.derby-client.testclient.autoInit = false
persistence.sqlite.testsqlite.autoInit = true
persistence.mysql.testmysql.autoInit = false
persistence.postgres.testpostgres.autoInit = true
#Some database engines require database
#In the next example, database=postgres_db; schema=testpostgres
persistence.postgres.testpostgres.database = postgres_db
#Username for Derby Network Server
persistence.derby.test.parts.username = user
persistence.mysql.testmysql.username = root
persistence.postgres.testpostgres.username = postgres
persistence.postgres.testpostgres.password = root
#Password for Derby Network Server
persistence.derby.test.parts.password = pass
#Port for Derby Network Server
#persistence.derby.port = 1527
persistence.derby.port = 0
#Long Id supplier
persistence.derby.test.parts.idSupplier = com.aegisql.conveyor.config.ConveyorConfigurationTest.idSource.getId()

#Encryption parameters
persistence.derby.encryptionAlgorithm = AES
persistence.derby.encryptionTransformation = AES/ECB/PKCS5Padding
persistence.derby.encryptionKeyLength = 16
persistence.derby.test.parts.encryptionSecret = erfq834hfq8723royf87341r

#How many completed parts will be buffered, before removing from storage
persistence.derby.test.parts.maxBatchSize = 100
#Max time completed parts will be buffered, before removing from storage
persistence.derby.test.parts.maxBatchTime = 10 SECONDS
#Exclude some metadata keys and values from persistence
persistence.derby.test.parts.doNotSaveProperties = property1,property2

#Archiving Strategies
#By ArchiveStrategy enum
persistence.derby.test.parts.archiveStrategy = NO_ACTION
persistence.derby.test.parts.archiveStrategy = DELETE
persistence.derby.test.parts.archiveStrategy = SET_ARCHIVED

#Custom Strategy
persistence.derby.test.parts.archiveStrategy = CUSTOM
persistence.derby.test.parts.archiveStrategy.archiver = com.aegisql.conveyor.config.ConveyorConfigurationTest.archiver

#Move to other persistence (derby.test.parts2 defined above)
persistence.derby.test.parts.archiveStrategy = MOVE_TO_PERSISTENCE
persistence.derby.test.parts.archiveStrategy.persistence = mysql.testmysql.parts

#Move to file
persistence.derby.test.parts.archiveStrategy = MOVE_TO_FILE
persistence.derby.test.parts.archiveStrategy.path = /test/
persistence.derby.test.parts.archiveStrategy.moveTo = /backup/
persistence.derby.test.parts.archiveStrategy.maxFileSize = 10MB
persistence.derby.test.parts.archiveStrategy.bucketSize = 1000
persistence.derby.test.parts.archiveStrategy.zip = true

#Add Binary converters
persistence.derby.test.parts.addBinaryConverter = java.lang.Long, new com.aegisql.conveyor.persistence.converters.LongToBytesConverter();
persistence.derby.test.parts.addBinaryConverter = java.lang.Boolean, new com.aegisql.conveyor.persistence.converters.BooleanToBytesConverter();
persistence.derby.test.parts.addBinaryConverter = com.aegisql.conveyor.config.harness.NameLabel.FIRST, new com.aegisql.conveyor.persistence.converters.BooleanToBytesConverter();

#Add Label Converters
persistence.derby.test.parts.labelConverter = new com.aegisql.conveyor.persistence.jdbc.converters.EnumConverter(com.aegisql.conveyor.config.harness.NameLabel.class);
persistence.derby.test.parts.labelConverter = com.aegisql.conveyor.config.harness.NameLabel

#minCompactSize > 0 enables auto compaction
#when number of stored parts reaches minCompactSize compact() method is called for corresponding build ID
persistence.derby.test.parts.minCompactSize = 10000
#One of the RestoreOrder enum constants
persistence.derby.test.parts.restoreOrder = BY_ID
#Additional field for test.parts table; default accesstor will lookup field in the cart properties
persistence.derby.test.parts.addField = java.lang.Long, TRANSACTION_ID
#Additional field for test.parts table; accessor can be specified as a full path to the Function static instance or JavaScript function
persistence.derby.test.parts.addField = java.lang.Long, TRANSACTION_ID, function(cart){return cart.getLabel();}
#when initialize parts table, will create unique index on provided colum names
persistence.derby.test.parts.addUniqueFields = CART_KEY, CART_LABEL
